// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/functions"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"

	"github.com/ucloud/ucloud-sdk-go/services/ucloudstack"
)

func TestScenario4207(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: "4207",
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{
				"Region":    "cn-sh2",
				"Zone":      "cn-sh2-02",
				"EndTime":   scenario.Must(functions.GetTimestamp(10)),
				"BeginTime": scenario.Must(functions.Calculate("-", scenario.Must(functions.GetTimestamp(10)), 3600)),
			}
		},
		Owners: []string{"sunny.zhang@ucloud.cn"},
		Title:  "SDK-测试集-1",
		Steps: []*driver.Step{
			testStep4207UCloudStackDescribeVPC01,
			testStep4207UCloudStackDescribeSecurityGroup02,
			testStep4207UCloudStackGetVMInstancePrice03,
			testStep4207UCloudStackCreateVMInstance04,
			testStep4207UCloudStackDescribeVMInstance05,
			testStep4207UCloudStackGetAlarmTemplateList06,
			testStep4207UCloudStackBindAlarmTemplate07,
			testStep4207UCloudStackUnbindAlarmTemplate08,
			testStep4207UCloudStackResetVMInstancePassword09,
			testStep4207UCloudStackDescribeVMInstance10,
			testStep4207UCloudStackRestartVMInstance11,
			testStep4207UCloudStackDescribeVMInstance12,
			testStep4207UCloudStackModifyNameAndRemark13,
			testStep4207UCloudStackDescribeMetric14,
			testStep4207UCloudStackStopVMInstance15,
			testStep4207UCloudStackDescribeVMInstance16,
			testStep4207UCloudStackResizeVMConfig17,
			testStep4207UCloudStackDescribeVMInstance18,
			testStep4207UCloudStackReinstallVMInstance19,
			testStep4207UCloudStackDescribeVMInstance20,
			testStep4207UCloudStackStartVMInstance21,
			testStep4207UCloudStackDescribeVMInstance22,
			testStep4207UCloudStackGetEIPPrice23,
			testStep4207UCloudStackAllocateEIP24,
			testStep4207UCloudStackDescribeEIP25,
			testStep4207UCloudStackBindEIP26,
			testStep4207UCloudStackDescribeEIP27,
			testStep4207UCloudStackUnBindEIP28,
			testStep4207UCloudStackDescribeEIP29,
			testStep4207UCloudStackReleaseEIP30,
			testStep4207UCloudStackGetDiskPrice31,
			testStep4207UCloudStackCreateDisk32,
			testStep4207UCloudStackDescribeDisk33,
			testStep4207UCloudStackAttachDisk34,
			testStep4207UCloudStackDescribeDisk35,
			testStep4207UCloudStackDetachDisk36,
			testStep4207UCloudStackDescribeDisk37,
			testStep4207UCloudStackDeleteDisk38,
			testStep4207UCloudStackStopVMInstance39,
			testStep4207UCloudStackDescribeVMInstance40,
			testStep4207UCloudStackDeleteVMInstance41,
		},
	})
}

var testStep4207UCloudStackDescribeVPC01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeVPCRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Offset":    0,
			"Limit":     10,
			"AccountID": 0,
		})

		resp, err := client.DescribeVPC(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("VPCID", step.Must(utils.GetValue(resp, "Infos.0.VPCID")))
		step.Scenario.SetVar("SubnetID", step.Must(utils.GetValue(resp, "Infos.0.SubnetInfos.0.SubnetID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeVPCResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取VPC信息",
	FastFail:      false,
}

var testStep4207UCloudStackDescribeSecurityGroup02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeSecurityGroupRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"needPoll": "true",
			"Offset":   0,
			"Limit":    10,
		})

		resp, err := client.DescribeSecurityGroup(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("SGID", step.Must(utils.GetValue(resp, "Infos.0.SGID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeSecurityGroupResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取防火墙信息",
	FastFail:      false,
}

var testStep4207UCloudStackGetVMInstancePrice03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewGetVMInstancePriceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":            step.Scenario.GetVar("Zone"),
			"VMType":          "Normal",
			"Region":          step.Scenario.GetVar("Region"),
			"OSType":          "Linux",
			"Memory":          2048,
			"ImageID":         "cn-image-centos-74",
			"DataDiskSpace":   10,
			"DataDiskSetType": "Normal",
			"ChargeType":      "Month",
			"CPU":             1,
			"BootDiskSetType": "Normal",
		})

		resp, err := client.GetVMInstancePrice(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetVMInstancePriceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取UCloudStack虚拟机价格",
	FastFail:      false,
}

var testStep4207UCloudStackCreateVMInstance04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewCreateVMInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":          step.Scenario.GetVar("Zone"),
			"WANSGID":       step.Scenario.GetVar("SGID"),
			"VPCID":         step.Scenario.GetVar("VPCID"),
			"VMType":        "SSD",
			"SubnetID":      step.Scenario.GetVar("SubnetID"),
			"Region":        step.Scenario.GetVar("Region"),
			"Quantity":      1,
			"Password":      "ucloud.cn",
			"Name":          "sdk-test",
			"Memory":        2048,
			"ImageID":       "cn-image-centos-74",
			"DataDiskType":  "SSD",
			"DataDiskSpace": 0,
			"ChargeType":    "Month",
			"CPU":           1,
			"BootDiskType":  "SSD",
		})

		resp, err := client.CreateVMInstance(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("VMID", step.Must(utils.GetValue(resp, "VMID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateVMInstanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建UCloudStack虚拟机",
	FastFail:      false,
}

var testStep4207UCloudStackDescribeVMInstance05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeVMInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone": step.Scenario.GetVar("Zone"),
			"VMIDs": []interface{}{
				step.Scenario.GetVar("VMID"),
			},
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.DescribeVMInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeVMInstanceResponse", "str_eq"),
			validation.Builtins.NewValidator("Infos.0.State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    30,
	RetryInterval: 10 * time.Second,
	Title:         "查询UCloudStack虚拟机",
	FastFail:      false,
}

var testStep4207UCloudStackGetAlarmTemplateList06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewGenericRequest()
		_ = req.SetAction("UCloudStackGetAlarmTemplateList")
		req.SetPayload(map[string]interface{}{
			"ResourceType": "VM",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("AlarmTemplateID", step.Must(utils.GetValue(resp, "Infos.0.AlarmTemplateID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetAlarmTemplateListResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取告警模板列表",
	FastFail:      false,
}

var testStep4207UCloudStackBindAlarmTemplate07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewBindAlarmTemplateRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":         step.Scenario.GetVar("Zone"),
			"ResourceType": "VM",
			"ResourceIDs": []interface{}{
				step.Scenario.GetVar("VMID"),
			},
			"Region":          step.Scenario.GetVar("Region"),
			"AlarmTemplateID": step.Scenario.GetVar("AlarmTemplateID"),
		})

		resp, err := client.BindAlarmTemplate(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "BindAlarmTemplateUcskResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "绑定告警模板",
	FastFail:      false,
}

var testStep4207UCloudStackUnbindAlarmTemplate08 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewUnbindAlarmTemplateRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":         step.Scenario.GetVar("Zone"),
			"ResourceType": "VM",
			"ResourceIDs": []interface{}{
				step.Scenario.GetVar("VMID"),
			},
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.UnbindAlarmTemplate(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "UnbindAlarmTemplateUcskResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "解绑告警模板",
	FastFail:      false,
}

var testStep4207UCloudStackResetVMInstancePassword09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewResetVMInstancePasswordRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"VMID":     step.Scenario.GetVar("VMID"),
			"Region":   step.Scenario.GetVar("Region"),
			"Password": "Password123!@#",
		})

		resp, err := client.ResetVMInstancePassword(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "ResetVMInstancePasswordResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "重置虚拟机密码",
	FastFail:      false,
}

var testStep4207UCloudStackDescribeVMInstance10 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeVMInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone": step.Scenario.GetVar("Zone"),
			"VMIDs": []interface{}{
				step.Scenario.GetVar("VMID"),
			},
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.DescribeVMInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeVMInstanceResponse", "str_eq"),
			validation.Builtins.NewValidator("Infos.0.State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    30,
	RetryInterval: 10 * time.Second,
	Title:         "查询UCloudStack虚拟机",
	FastFail:      false,
}

var testStep4207UCloudStackRestartVMInstance11 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewRestartVMInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"VMID":   step.Scenario.GetVar("VMID"),
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.RestartVMInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "RestartVMInstanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "重启虚拟机",
	FastFail:      false,
}

var testStep4207UCloudStackDescribeVMInstance12 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeVMInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone": step.Scenario.GetVar("Zone"),
			"VMIDs": []interface{}{
				step.Scenario.GetVar("VMID"),
			},
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.DescribeVMInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeVMInstanceResponse", "str_eq"),
			validation.Builtins.NewValidator("Infos.0.State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    30,
	RetryInterval: 10 * time.Second,
	Title:         "查询UCloudStack虚拟机",
	FastFail:      false,
}

var testStep4207UCloudStackModifyNameAndRemark13 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewModifyNameAndRemarkRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"ResourceID": step.Scenario.GetVar("VMID"),
			"Remark":     "modifytestremark",
			"Region":     step.Scenario.GetVar("Region"),
			"Name":       "modifytestname",
		})

		resp, err := client.ModifyNameAndRemark(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "ModifyNameAndRemarkResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "修改资源名称和备注",
	FastFail:      false,
}

var testStep4207UCloudStackDescribeMetric14 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeMetricRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":         step.Scenario.GetVar("Zone"),
			"ResourceType": "VM",
			"ResourceID":   step.Scenario.GetVar("VMID"),
			"Region":       step.Scenario.GetVar("Region"),
			"MetricName": []interface{}{
				"DiskReadOps",
			},
			"EndTime":   step.Scenario.GetVar("EndTime"),
			"BeginTime": step.Scenario.GetVar("BeginTime"),
		})

		resp, err := client.DescribeMetric(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetMetricResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取监控数据",
	FastFail:      false,
}

var testStep4207UCloudStackStopVMInstance15 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewStopVMInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"VMID":   step.Scenario.GetVar("VMID"),
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.StopVMInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "StopVMInstanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "关闭UCloudStack虚拟机",
	FastFail:      false,
}

var testStep4207UCloudStackDescribeVMInstance16 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeVMInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone": step.Scenario.GetVar("Zone"),
			"VMIDs": []interface{}{
				step.Scenario.GetVar("VMID"),
			},
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.DescribeVMInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeVMInstanceResponse", "str_eq"),
			validation.Builtins.NewValidator("Infos.0.State", "Stopped", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    30,
	RetryInterval: 10 * time.Second,
	Title:         "查询UCloudStack虚拟机",
	FastFail:      false,
}

var testStep4207UCloudStackResizeVMConfig17 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewResizeVMConfigRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"VMID":   step.Scenario.GetVar("VMID"),
			"Region": step.Scenario.GetVar("Region"),
			"Memory": 4096,
			"CPU":    2,
		})

		resp, err := client.ResizeVMConfig(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "ResizeVMConfigResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "修改虚拟机配置",
	FastFail:      false,
}

var testStep4207UCloudStackDescribeVMInstance18 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeVMInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone": step.Scenario.GetVar("Zone"),
			"VMIDs": []interface{}{
				step.Scenario.GetVar("VMID"),
			},
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.DescribeVMInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeVMInstanceResponse", "str_eq"),
			validation.Builtins.NewValidator("Infos.0.State", "Stopped", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    30,
	RetryInterval: 10 * time.Second,
	Title:         "查询UCloudStack虚拟机",
	FastFail:      false,
}

var testStep4207UCloudStackReinstallVMInstance19 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewReinstallVMInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"VMID":    step.Scenario.GetVar("VMID"),
			"Region":  step.Scenario.GetVar("Region"),
			"ImageID": "cn-image-centos-74",
		})

		resp, err := client.ReinstallVMInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "ReinstallVMInstanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "重装系统",
	FastFail:      false,
}

var testStep4207UCloudStackDescribeVMInstance20 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeVMInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone": step.Scenario.GetVar("Zone"),
			"VMIDs": []interface{}{
				step.Scenario.GetVar("VMID"),
			},
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.DescribeVMInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeVMInstanceResponse", "str_eq"),
			validation.Builtins.NewValidator("Infos.0.State", "Stopped", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    30,
	RetryInterval: 10 * time.Second,
	Title:         "查询UCloudStack虚拟机",
	FastFail:      false,
}

var testStep4207UCloudStackStartVMInstance21 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewStartVMInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"VMID":   step.Scenario.GetVar("VMID"),
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.StartVMInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "StartVMInstanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "开启UCloudStack虚拟机",
	FastFail:      false,
}

var testStep4207UCloudStackDescribeVMInstance22 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeVMInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone": step.Scenario.GetVar("Zone"),
			"VMIDs": []interface{}{
				step.Scenario.GetVar("VMID"),
			},
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.DescribeVMInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeVMInstanceResponse", "str_eq"),
			validation.Builtins.NewValidator("Infos.0.State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    30,
	RetryInterval: 10 * time.Second,
	Title:         "查询UCloudStack虚拟机",
	FastFail:      false,
}

var testStep4207UCloudStackGetEIPPrice23 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewGetEIPPriceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":          step.Scenario.GetVar("Zone"),
			"Region":        step.Scenario.GetVar("Region"),
			"OpertatorName": "Bgp",
			"ChargeType":    "Month",
			"Bandwidth":     1,
		})

		resp, err := client.GetEIPPrice(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetEIPPriceucskResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取UCloudStack弹性IP价格",
	FastFail:      false,
}

var testStep4207UCloudStackAllocateEIP24 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewAllocateEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":         step.Scenario.GetVar("Zone"),
			"Region":       step.Scenario.GetVar("Region"),
			"OperatorName": "Bgp",
			"Name":         "stackeip",
			"ChargeType":   "Month",
			"Bandwidth":    1,
		})

		resp, err := client.AllocateEIP(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("EIPID", step.Must(utils.GetValue(resp, "EIPID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "AllocateEIPucskResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "申请UCloudStack外网IP",
	FastFail:      false,
}

var testStep4207UCloudStackDescribeEIP25 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"EIPIDs": []interface{}{
				step.Scenario.GetVar("EIPID"),
			},
		})

		resp, err := client.DescribeEIP(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeEIPusckResponse", "str_eq"),
			validation.Builtins.NewValidator("Infos.0.Status", "Free", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    30,
	RetryInterval: 10 * time.Second,
	Title:         "获取UCloudStack外网IP的信息",
	FastFail:      false,
}

var testStep4207UCloudStackBindEIP26 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewBindEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":         step.Scenario.GetVar("Zone"),
			"ResourceType": "VM",
			"ResourceID":   step.Scenario.GetVar("VMID"),
			"Region":       step.Scenario.GetVar("Region"),
			"EIPID":        step.Scenario.GetVar("EIPID"),
		})

		resp, err := client.BindEIP(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "BindEIPusckResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "绑定UCoudStack弹性IP",
	FastFail:      false,
}

var testStep4207UCloudStackDescribeEIP27 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"EIPIDs": []interface{}{
				step.Scenario.GetVar("EIPID"),
			},
		})

		resp, err := client.DescribeEIP(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeEIPusckResponse", "str_eq"),
			validation.Builtins.NewValidator("Infos.0.Status", "Bound", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    30,
	RetryInterval: 10 * time.Second,
	Title:         "获取UCloudStack外网IP的信息",
	FastFail:      false,
}

var testStep4207UCloudStackUnBindEIP28 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewUnBindEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":         step.Scenario.GetVar("Zone"),
			"ResourceType": "VM",
			"ResourceID":   step.Scenario.GetVar("VMID"),
			"Region":       step.Scenario.GetVar("Region"),
			"EIPID":        step.Scenario.GetVar("EIPID"),
		})

		resp, err := client.UnBindEIP(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "UnBindEIPusckResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "解绑UCloudStack外网IP",
	FastFail:      false,
}

var testStep4207UCloudStackDescribeEIP29 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"EIPIDs": []interface{}{
				step.Scenario.GetVar("EIPID"),
			},
		})

		resp, err := client.DescribeEIP(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeEIPusckResponse", "str_eq"),
			validation.Builtins.NewValidator("Infos.0.Status", "Free", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    30,
	RetryInterval: 10 * time.Second,
	Title:         "获取UCloudStack外网IP的信息",
	FastFail:      false,
}

var testStep4207UCloudStackReleaseEIP30 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewReleaseEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"EIPID":  step.Scenario.GetVar("EIPID"),
		})

		resp, err := client.ReleaseEIP(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "ReleaseEIPucskResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除UCloudStack外网IP",
	FastFail:      false,
}

var testStep4207UCloudStackGetDiskPrice31 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewGetDiskPriceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"SetType":    "Normal",
			"Region":     step.Scenario.GetVar("Region"),
			"DiskSpace":  10,
			"ChargeType": "Month",
		})

		resp, err := client.GetDiskPrice(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetDiskPriceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取UCloudStack硬盘价格",
	FastFail:      false,
}

var testStep4207UCloudStackCreateDisk32 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewCreateDiskRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"SetType":    "Normal",
			"Region":     step.Scenario.GetVar("Region"),
			"Name":       "stackdisk",
			"DiskSpace":  10,
			"ChargeType": "Month",
		})

		resp, err := client.CreateDisk(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("DiskID", step.Must(utils.GetValue(resp, "DiskID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateDiskucskResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建UCloudStack硬盘",
	FastFail:      false,
}

var testStep4207UCloudStackDescribeDisk33 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeDiskRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DiskIDs": []interface{}{
				step.Scenario.GetVar("DiskID"),
			},
		})

		resp, err := client.DescribeDisk(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeDiskResponse", "str_eq"),
			validation.Builtins.NewValidator("Infos.0.DiskStatus", "Unbound", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    30,
	RetryInterval: 10 * time.Second,
	Title:         "获取UCloudStack硬盘信息",
	FastFail:      false,
}

var testStep4207UCloudStackAttachDisk34 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewAttachDiskRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":         step.Scenario.GetVar("Zone"),
			"ResourceType": "VM",
			"ResourceID":   step.Scenario.GetVar("VMID"),
			"Region":       step.Scenario.GetVar("Region"),
			"DiskID":       step.Scenario.GetVar("DiskID"),
		})

		resp, err := client.AttachDisk(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "AttachDiskResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "绑定UClouStack硬盘",
	FastFail:      false,
}

var testStep4207UCloudStackDescribeDisk35 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeDiskRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DiskIDs": []interface{}{
				step.Scenario.GetVar("DiskID"),
			},
		})

		resp, err := client.DescribeDisk(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeDiskResponse", "str_eq"),
			validation.Builtins.NewValidator("Infos.0.DiskStatus", "Bound", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    30,
	RetryInterval: 10 * time.Second,
	Title:         "获取UCloudStack硬盘信息",
	FastFail:      false,
}

var testStep4207UCloudStackDetachDisk36 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDetachDiskRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"ResourceID": step.Scenario.GetVar("VMID"),
			"Region":     step.Scenario.GetVar("Region"),
			"DiskID":     step.Scenario.GetVar("DiskID"),
		})

		resp, err := client.DetachDisk(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DetachDiskResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "解绑UClouStack硬盘",
	FastFail:      false,
}

var testStep4207UCloudStackDescribeDisk37 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeDiskRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DiskIDs": []interface{}{
				step.Scenario.GetVar("DiskID"),
			},
		})

		resp, err := client.DescribeDisk(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeDiskResponse", "str_eq"),
			validation.Builtins.NewValidator("Infos.0.DiskStatus", "Unbound", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    30,
	RetryInterval: 10 * time.Second,
	Title:         "获取UCloudStack硬盘信息",
	FastFail:      false,
}

var testStep4207UCloudStackDeleteDisk38 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDeleteDiskRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DiskID": step.Scenario.GetVar("DiskID"),
		})

		resp, err := client.DeleteDisk(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteDiskResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除UCloudStack硬盘",
	FastFail:      false,
}

var testStep4207UCloudStackStopVMInstance39 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewStopVMInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"VMID":   step.Scenario.GetVar("VMID"),
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.StopVMInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "StopVMInstanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "关闭UCloudStack虚拟机",
	FastFail:      false,
}

var testStep4207UCloudStackDescribeVMInstance40 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeVMInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone": step.Scenario.GetVar("Zone"),
			"VMIDs": []interface{}{
				step.Scenario.GetVar("VMID"),
			},
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.DescribeVMInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeVMInstanceResponse", "str_eq"),
			validation.Builtins.NewValidator("Infos.0.State", "Stopped", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    30,
	RetryInterval: 10 * time.Second,
	Title:         "查询UCloudStack虚拟机",
	FastFail:      false,
}

var testStep4207UCloudStackDeleteVMInstance41 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDeleteVMInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"VMID":   step.Scenario.GetVar("VMID"),
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.DeleteVMInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteVMInstanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除UCloudStack虚拟机",
	FastFail:      false,
}
