// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/functions"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"

	"github.com/ucloud/ucloud-sdk-go/services/ucloudstack"
)

func TestScenario4451(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: "4451",
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{
				"Region": "cn-sh2",
				"Zone":   "cn-sh2-02",
			}
		},
		Owners: []string{"sunny.zhang@ucloud.cn"},
		Title:  "SDK-测试集-2",
		Steps: []*driver.Step{
			testStep4451UCloudStackLoginByPassword01,
			testStep4451UCloudStackDescribeUser02,
			testStep4451UCloudStackCreateUser03,
			testStep4451UCloudStackRecharge04,
		},
	})
}

var testStep4451UCloudStackLoginByPassword01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewLoginByPasswordRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"UserEmail": "admin@ucloud.cn",
			"Password":  "ucloud.cn",
		})

		resp, err := client.LoginByPassword(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "LoginByPassworducskResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "登录账户",
	FastFail:      false,
}

var testStep4451UCloudStackDescribeUser02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeUserRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Offset": 0,
			"Limit":  10,
		})

		resp, err := client.DescribeUser(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUserResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "查询UcloudStack租户信息",
	FastFail:      false,
}

var testStep4451UCloudStackCreateUser03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewCreateUserRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"UserEmail": "testsdk@ucloud.cn",
			"PassWord":  "ucloud.cn",
		})

		resp, err := client.CreateUser(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("UserID", step.Must(utils.GetValue(resp, "UserID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateUserResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "管理员添加账号",
	FastFail:      false,
}

var testStep4451UCloudStackRecharge04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewRechargeRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"UserID":   step.Scenario.GetVar("UserID"),
			"SerialNo": step.Must(functions.GetTimestamp(10)),
			"FromType": "INPOUR_FROM_ALIPAY",
			"Amount":   100,
		})

		resp, err := client.Recharge(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "RechargeResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "UCloudStack管理员给租户充值",
	FastFail:      false,
}
